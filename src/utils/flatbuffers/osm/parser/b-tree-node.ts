// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { OsmNode } from '../../osm/parser/osm-node';


export class BTreeNode {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):BTreeNode {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsBTreeNode(bb:flatbuffers.ByteBuffer, obj?:BTreeNode):BTreeNode {
  return (obj || new BTreeNode()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsBTreeNode(bb:flatbuffers.ByteBuffer, obj?:BTreeNode):BTreeNode {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new BTreeNode()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

keys(index: number):string
keys(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
keys(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

keysLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

values(index: number, obj?:OsmNode):OsmNode|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new OsmNode()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

valuesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

isShared():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

children(index: number, obj?:BTreeNode):BTreeNode|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new BTreeNode()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

childrenLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startBTreeNode(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addKeys(builder:flatbuffers.Builder, keysOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, keysOffset, 0);
}

static createKeysVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startKeysVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addValues(builder:flatbuffers.Builder, valuesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, valuesOffset, 0);
}

static createValuesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startValuesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addIsShared(builder:flatbuffers.Builder, isShared:boolean) {
  builder.addFieldInt8(2, +isShared, +false);
}

static addChildren(builder:flatbuffers.Builder, childrenOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, childrenOffset, 0);
}

static createChildrenVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startChildrenVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endBTreeNode(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createBTreeNode(builder:flatbuffers.Builder, keysOffset:flatbuffers.Offset, valuesOffset:flatbuffers.Offset, isShared:boolean, childrenOffset:flatbuffers.Offset):flatbuffers.Offset {
  BTreeNode.startBTreeNode(builder);
  BTreeNode.addKeys(builder, keysOffset);
  BTreeNode.addValues(builder, valuesOffset);
  BTreeNode.addIsShared(builder, isShared);
  BTreeNode.addChildren(builder, childrenOffset);
  return BTreeNode.endBTreeNode(builder);
}
}
