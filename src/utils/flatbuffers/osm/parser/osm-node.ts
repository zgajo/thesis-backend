// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { OsmNodesConnection } from '../../osm/parser/osm-nodes-connection';


export class OsmNode {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):OsmNode {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsOsmNode(bb:flatbuffers.ByteBuffer, obj?:OsmNode):OsmNode {
  return (obj || new OsmNode()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsOsmNode(bb:flatbuffers.ByteBuffer, obj?:OsmNode):OsmNode {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new OsmNode()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

pointsTo(index: number, obj?:OsmNodesConnection):OsmNodesConnection|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new OsmNodesConnection()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

pointsToLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startOsmNode(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addPointsTo(builder:flatbuffers.Builder, pointsToOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, pointsToOffset, 0);
}

static createPointsToVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPointsToVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endOsmNode(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createOsmNode(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, pointsToOffset:flatbuffers.Offset):flatbuffers.Offset {
  OsmNode.startOsmNode(builder);
  OsmNode.addId(builder, idOffset);
  OsmNode.addPointsTo(builder, pointsToOffset);
  return OsmNode.endOsmNode(builder);
}
}
