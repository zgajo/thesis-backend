// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { GeohashTree } from '../../osm/parser/geohash-tree';


export class OsmData {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):OsmData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsOsmData(bb:flatbuffers.ByteBuffer, obj?:OsmData):OsmData {
  return (obj || new OsmData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsOsmData(bb:flatbuffers.ByteBuffer, obj?:OsmData):OsmData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new OsmData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

highwayNodes(obj?:GeohashTree):GeohashTree|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new GeohashTree()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startOsmData(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addHighwayNodes(builder:flatbuffers.Builder, highwayNodesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, highwayNodesOffset, 0);
}

static endOsmData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishOsmDataBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedOsmDataBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createOsmData(builder:flatbuffers.Builder, highwayNodesOffset:flatbuffers.Offset):flatbuffers.Offset {
  OsmData.startOsmData(builder);
  OsmData.addHighwayNodes(builder, highwayNodesOffset);
  return OsmData.endOsmData(builder);
}
}
