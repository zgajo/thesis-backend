<div id="mapid"></div>
<script>  
  const currentPosition = JSON.parse("{{{currentPosition}}}")
  const routes = {{{routes}}}
  console.log(routes)
  const endPoint = JSON.parse("{{{endRoutePoint}}}")
      // Andorra
      const map = L.map("mapid").setView(currentPosition, 18);

  L.tileLayer('https://{s}.tile.openstreetmap.de/{z}/{x}/{y}.png', {
    maxZoom: 18,
    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
  }).addTo(map);

  // Rovinj
  //- const map = L.map("mapid").setView([45.0808344, 13.6383927], 8)
 

  L.circle(currentPosition, {radius: "{{{radius}}}", color: "#EE4B2B"}).addTo(map);

  const locationBounds = JSON.parse("{{{locationBounds}}}");
  if(locationBounds){
    L.rectangle(locationBounds).addTo(map);
  }

  const proximityBounds = JSON.parse("{{{proximityBounds}}}");
  if(proximityBounds){
    proximityBounds.forEach(bounds => L.rectangle(bounds).addTo(map))
  }

  {{!-- const edges = JSON.parse("{{{edges}}}");
  edges.forEach(edge => L.polyline(edge, {color: 'red'}).addTo(map)) --}}

  routes.forEach(current => {
    if(current.route.length){
      const closest = current.closestPoint
      if(closest) L.circle(closest, {radius: 5, color: "#EE4B2B"}).addTo(map);

      if(current.route) current.route.forEach(route => L.polyline(route, {color: 'red'}).addTo(map))

      const startingPoint = current.startRoutePoint
      if(startingPoint){
        const startMarker = new L.marker(startingPoint); //opacity may be set to zero
        startMarker.bindPopup(`
        <div>Start Point</div>
        <div>location: ${startingPoint}</div>
        <div>distance (km): ${current.distance/1000}</div>
        <div>travel time (minutes): ${Math.round(current.travelTime/60)}</div>
        <div>travel time (seconds): ${Math.round(current.travelTime)}</div>
        `, {permanent: true }).openPopup();
        startMarker.addTo(map);
      }

      if(endPoint){
        const endMarker = new L.marker(endPoint); //opacity may be set to zero
        endMarker.bindTooltip("End point", {permanent: true }).openPopup();
        endMarker.addTo(map);
      }

      const midpointLatLng = current.midpointLatLng
      if(midpointLatLng && currentPosition && closest){
        const curve = L.curve(
            [
              'M', currentPosition,
              'Q', midpointLatLng,
                closest
            ], {
            color: 'rgba(255,255,255,0.5)',
            weight: 5,
            dashArray: '8, 8', dashOffset: '8'
          })

        curve.addTo(map);

        const midCurveLocation = curve.trace([0.5])[0]
        console.log("curve", midCurveLocation)

        const toClosestMarker = new L.marker([midCurveLocation.lat,midCurveLocation.lng]); //opacity may be set to zero
        toClosestMarker.bindPopup(`
        <div>To closest</div>
        <div>distance (km): ${current.distanceToClosest/1000}</div>
        <div>travel time (seconds): ${current.travelTimeToClosest}</div>
        <div>travel time (minutes): ${Math.round(current.travelTimeToClosest/60)}</div>
        `, {permanent: true }).openPopup();
        toClosestMarker.addTo(map);
        
        {{!-- toClosestMarker.bindTooltip(`
        <div>To closest</div>
        <div>distance (km): ${current.distanceToClosest/1000}</div>
        <div>travel time (seconds): ${current.travelTimeToClosest}</div>
        <div>travel time (minutes): ${Math.round(current.travelTimeToClosest/60)}</div>
        `, {permanent: true }).openPopup();
        toClosestMarker.addTo(map); --}}
          
      }
    }
  })
  

  map.on('click', function(e) {
    const params = new Proxy(new URLSearchParams(window.location.search), {
      get: (searchParams, prop) => searchParams.get(prop),
    });
    let url = window.location.origin + `?precision=${params.precision}&lat=${e.latlng.lat}&lon=${e.latlng.lng}&radius=${params.radius}`

    


    window.location.href = url
  });

</script>